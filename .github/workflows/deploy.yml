name: Deploy to EC2

on:
  push:
    branches: [ master, main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        pip install -r requirements.txt
    
    - name: Lint frontend
      working-directory: ./frontend
      run: npm run lint
    
    - name: Type check frontend
      working-directory: ./frontend
      run: npx tsc --noEmit
    
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
    
    - name: Test backend
      working-directory: ./backend
      run: |
        python -m pytest --version || echo "No tests found, skipping"

  deploy:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          cd ~/Dispatch_Tool
          
          # Pull latest changes first
          git fetch origin
          git reset --hard origin/master
          
          # Check if deployment script exists, if not use inline deployment
          if [ -f "scripts/deploy.sh" ]; then
            echo "Using deployment script..."
            chmod +x scripts/deploy.sh
            ./scripts/deploy.sh
          else
            echo "Running inline deployment..."
            
            # Stop current containers
            make down || true
            
            # Clean up old images to save space
            docker system prune -f
            
            # Start production environment
            make prod-bg
            
            # Wait for services to be healthy
            sleep 30
            
            # Check if services are running
            docker-compose -f docker-compose.prod.yml ps
            
            # Test frontend health
            curl -f http://localhost/health || echo "Frontend health check failed"
            
            # Test backend health
            curl -f http://localhost:8000/health || echo "Backend health check failed"
            
            echo "Deployment completed!"
          fi